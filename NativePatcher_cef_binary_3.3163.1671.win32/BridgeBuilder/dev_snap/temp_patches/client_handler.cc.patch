//###_ORIGINAL D:\projects\cef_binary_3.3163.1671.win32\tests\cefclient\browser//client_handler.cc
//###_BEGIN 0
//###_PRE
#include <sstream>
//###_PRE
#include <string>
#include "tests/cefclient/myext/mycef_buildconfig.h" 
#include "libcef_dll/myext/myext.h"
#include "libcef_dll/myext/ExportFuncAuto.h"
//###_POST
#include "include/base/cef_bind.h"
//###_POST
#include "include/cef_browser.h"
//###_END 0
//###_BEGIN 0
//###_PRE
}
//###_PRE
}  // namespace
class MyCefJsHandler : public CefMessageRouterBrowserSide::Handler {
public:

managed_callback mcallback_;//my extension
MyCefJsHandler() {}


virtual bool OnQuery(CefRefPtr<CefBrowser> browser,
CefRefPtr<CefFrame> frame,
int64 query_id,
const CefString& request,
bool persistent,
CefRefPtr<Callback> callback) OVERRIDE {
CEF_REQUIRE_UI_THREAD();

//const std::string& request_str = request;
if (this->mcallback_)
{
INIT_MY_MET_ARGS(args, 6);
//
MyCefSetVoidPtr2(&vargs[1], browser.get());
MyCefSetVoidPtr2(&vargs[2], frame.get());
MyCefSetInt64(&vargs[3], query_id);
SetCefStringToJsValue2(&vargs[4], request);
MyCefSetBool(&vargs[5], persistent);
MyCefSetVoidPtr2(&vargs[6], callback);
this->mcallback_(CEF_MSG_OnQuery, &args);
//
return true;
}
return false;
}
};
//###_POST
class ClientDownloadImageCallback : public CefDownloadImageCallback {
//###_POST
public:
//###_END 0
//###_START 0
ClientHandler::ClientHandler(Delegate* delegate,
//###_FIND_NEXT_LANDMARK 0
DCHECK(!console_log_file_.empty());
//###_APPEND_START 0
this->mcallback_ = NULL;
this->enableKeyIntercept = 0;//init
//###_APPEND_STOP
//###_BEGIN 0
//###_PRE
CefRefPtr<CefMenuModel> model) {
//###_PRE
CEF_REQUIRE_UI_THREAD();
if (this->mcallback_) {

CefContextMenuHandlerExt::OnBeforeContextMenu(this->mcallback_,
browser,
frame,
params, model);

return;

}
//###_POST
if ((params->GetTypeFlags() & (CM_TYPEFLAG_PAGE | CM_TYPEFLAG_FRAME)) != 0) {
//###_POST
// Add a separator if the menu already has items.
//###_END 0
//###_BEGIN 0
//###_PRE
EventFlags event_flags) {
//###_PRE
CEF_REQUIRE_UI_THREAD();
if (this->mcallback_) {

CefContextMenuHandlerExt::OnContextMenuCommand(
this->mcallback_,
browser,
frame,
params,
command_id,
event_flags);
return true;
}
//###_POST
switch (command_id) {
//###_POST
case CLIENT_ID_SHOW_DEVTOOLS:
//###_END 0
//###_BEGIN 0
//###_PRE
const CefString& title) {
//###_PRE
CEF_REQUIRE_UI_THREAD();
if (this->mcallback_) {
CefDisplayHandlerExt::OnTitleChange(this->mcallback_, browser, title);
return;
}
//###_POST
NotifyTitle(title);
//###_POST
}
//###_END 0
//###_BEGIN 0
//###_PRE
int line) {
//###_PRE
CEF_REQUIRE_UI_THREAD();
if (this->mcallback_)
{
CefDisplayHandlerExt::OnConsoleMessage(this->mcallback_, browser, message, source, line);
return false;
}
//###_POST
FILE* file = fopen(console_log_file_.c_str(), "a");
//###_POST
if (file) {
//###_END 0
//###_BEGIN 0
//###_PRE
CefRefPtr<CefBeforeDownloadCallback> callback) {
//###_PRE
CEF_REQUIRE_UI_THREAD();
if (this->mcallback_) {
CefDownloadHandlerExt::OnBeforeDownload(this->mcallback_,
browser, download_item, suggested_name,
callback);
return;
}
//###_POST
// Continue the download and show the "Save As" dialog.
//###_POST
callback->Continue(MainContext::Get()->GetDownloadPath(suggested_name), true);
//###_END 0
//###_BEGIN 0
//###_PRE
CefRefPtr<CefDownloadItemCallback> callback) {
//###_PRE
CEF_REQUIRE_UI_THREAD();
if (this->mcallback_) {
CefDownloadHandlerExt::OnDownloadUpdated(this->mcallback_,
browser, download_item, callback);
return;
}
//###_POST
if (download_item->IsComplete()) {
//###_POST
test_runner::Alert(browser, "File \"" +
//###_END 0
//###_START 3
// Allow geolocation access from all websites.
//###_APPEND_START 3
callback->Continue(false); //I cancel all :)
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 3
return true;
//###_START 7
bool ClientHandler::OnPreKeyEvent(CefRefPtr<CefBrowser> browser,
//###_FIND_NEXT_LANDMARK 7
CEF_REQUIRE_UI_THREAD();
//###_APPEND_START 7
if (this->mcallback_) {

if (this->enableKeyIntercept != 0)
{
//return true or false 
CefKeyboardHandlerExt::OnPreKeyEvent(
this->mcallback_,
browser,
event,
os_event,
is_keyboard_shortcut);

return false; //not handle

}
return false;
}
else {
if (!event.focus_on_editable_field && event.windows_key_code == 0x20) {
// Special handling for the space character when an input element does not
// have focus. Handling the event in OnPreKeyEvent() keeps the event from
// being processed in the renderer. If we instead handled the event in the
// OnKeyEvent() method the space key would cause the window to scroll in
// addition to showing the alert box.
if (event.type == KEYEVENT_RAWKEYDOWN)
test_runner::Alert(browser, "You pressed the space bar!");
return true;
}
}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 7
return false;
//###_BEGIN 0
//###_PRE
bool* no_javascript_access) {
//###_PRE
CEF_REQUIRE_UI_THREAD();
if (this->mcallback_) {

//create popup window
//with specific url
//*** on managed side  : please invoke on main process of app ***
CefLifeSpanHandlerExt::OnBeforePopup(this->mcallback_,
browser,
frame,
target_url,
target_frame_name,
target_disposition,
user_gesture,
popupFeatures,
windowInfo,
client,
settings,
no_javascript_access
);
return true;
}
//###_POST
// Return true to cancel the popup window.
//###_POST
return !CreatePopupWindow(browser, false, popupFeatures, windowInfo, client,
//###_END 0
//###_START 5
void ClientHandler::OnAfterCreated(CefRefPtr<CefBrowser> browser) {
//###_FIND_NEXT_LANDMARK 5
message_router_ = CefMessageRouterBrowserSide::Create(config);
//###_APPEND_START 5
// Register handlers with the router.
if (this->mcallback_)
{
//1. msg handler
MyCefJsHandler* myCefJsHandler = new MyCefJsHandler();
message_handler_set_.insert(myCefJsHandler);
myCefJsHandler->mcallback_ = this->mcallback_;

MessageHandlerSet::const_iterator it = message_handler_set_.begin();
for (; it != message_handler_set_.end(); ++it)
message_router_->AddHandler(*(it), false);
}
else
{
test_runner::CreateMessageHandlers(message_handler_set_);
MessageHandlerSet::const_iterator it = message_handler_set_.begin();
for (; it != message_handler_set_.end(); ++it)
message_router_->AddHandler(*(it), false);

}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 5
}
//###_START 6
void ClientHandler::OnLoadError(CefRefPtr<CefBrowser> browser,
//###_FIND_NEXT_LANDMARK 6
// Don't display an error for external protocols that we allow the OS to
//###_FIND_NEXT_LANDMARK 6
// handle. See OnProtocolExecution().
//###_APPEND_START 6
if (this->mcallback_)
{
CefLoadHandlerExt::OnLoadError(this->mcallback_,
browser,
frame,
errorCode,
errorText,
failedUrl);
////load page error 
//LoadErrorPage(frame, failedUrl, errorCode, errorText);
}
else
{
if (errorCode == ERR_UNKNOWN_URL_SCHEME) {
std::string urlStr = frame->GetURL();
if (urlStr.find("spotify:") == 0)
return;
}
// Load the error page. 
LoadErrorPage(frame, failedUrl, errorCode, errorText);
}
//###_APPEND_STOP
//###_SKIP_UNTIL_PASS 6 }
//###_START 10
void ClientHandler::OnProtocolExecution(CefRefPtr<CefBrowser> browser,
//###_FIND_NEXT_LANDMARK 10
CEF_REQUIRE_UI_THREAD();
//###_APPEND_START 10
if (this->mcallback_)
{
CefRequestHandlerExt::OnProtocolExecution(this->mcallback_,
browser,
url,
allow_os_execution);
allow_os_execution = false; //force 
}
else {
std::string urlStr = url;
// Allow OS execution of Spotify URIs.
if (urlStr.find("spotify:") == 0)
allow_os_execution = true;
}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 10
}
//###_START 9
bool ClientHandler::OnCertificateError(CefRefPtr<CefBrowser> browser,
//###_FIND_NEXT_LANDMARK 9
CEF_REQUIRE_UI_THREAD();
//###_APPEND_START 9
CefRefPtr<CefX509Certificate> cert = ssl_info->GetX509Certificate();
if (cert.get()) {
// Load the error page.
if (this->mcallback_)
{
if (CefRequestHandlerExt::OnCertificateError(
this->mcallback_,
browser,
cert_error,
request_url,
ssl_info,
callback
)) {
callback->Continue(true);
return true;
}
}
else
{
LoadErrorPage(browser->GetMainFrame(), request_url, cert_error,
GetCertificateInformation(cert, ssl_info->GetCertStatus()));
}
}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 9
return false;  // Cancel the request.
//###_START 6
void ClientHandler::ShowDevTools(CefRefPtr<CefBrowser> browser,
//###_FIND_NEXT_LANDMARK 6
CefBrowserSettings settings;
//###_APPEND_START 6
if (this->mcallback_)
{	
return;
}
//###_APPEND_STOP
//###_START 7
void ClientHandler::CloseDevTools(CefRefPtr<CefBrowser> browser) {
//###_APPEND_START 7
if (this->mcallback_) {
//TODO: send command
this->mcallback_(CEF_MSG_ClientHandler_CloseDevTools, NULL);
}
else {
browser->GetHost()->CloseDevTools();
}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 7
}
//###_START 8
void ClientHandler::NotifyBrowserCreated(CefRefPtr<CefBrowser> browser) {
//###_FIND_NEXT_LANDMARK 8
MAIN_POST_CLOSURE(
//###_FIND_NEXT_LANDMARK 8
}
//###_APPEND_START 8
if (this->mcallback_) {
this->mcallback_(CEF_MSG_ClientHandler_NotifyBrowserCreated, NULL);
}
//###_APPEND_STOP
//###_START 8
void ClientHandler::NotifyBrowserClosing(CefRefPtr<CefBrowser> browser) {
//###_FIND_NEXT_LANDMARK 8
delegate_->OnBrowserClosing(browser);
//###_APPEND_START 8
if (this->mcallback_) {
this->mcallback_(CEF_MSG_ClientHandler_NotifyBrowserClosing, NULL);
}
//###_APPEND_STOP
//###_START 9
void ClientHandler::NotifyBrowserClosed(CefRefPtr<CefBrowser> browser) {
//###_FIND_NEXT_LANDMARK 9
delegate_->OnBrowserClosed(browser);
//###_APPEND_START 9
if (this->mcallback_) {
this->mcallback_(CEF_MSG_ClientHandler_NotifyBrowserClosed, NULL);
}
//###_APPEND_STOP
//###_START 11
void ClientHandler::NotifyAddress(const CefString& url) {
//###_FIND_NEXT_LANDMARK 11
if (!CURRENTLY_ON_MAIN_THREAD()) {
//###_FIND_NEXT_LANDMARK 11
}
//###_APPEND_START 11
if (this->mcallback_ != NULL) {
//------------------- 
INIT_MY_MET_ARGS(args, 1);
SetCefStringToJsValue2(&vargs[1], url);
this->mcallback_(CEF_MSG_ClientHandler_NotifyAddress, &args);
}
else {
if (delegate_)
delegate_->OnSetAddress(url);
}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 11
}
//###_START 10
void ClientHandler::NotifyTitle(const CefString& title) {
//###_FIND_NEXT_LANDMARK 10
if (!CURRENTLY_ON_MAIN_THREAD()) {
//###_FIND_NEXT_LANDMARK 10
}
//###_APPEND_START 10
if (this->mcallback_ != NULL) {

INIT_MY_MET_ARGS(metArgs, 1)
SetCefStringToJsValue2(&vargs[1], title);
mcallback_(CEF_MSG_ClientHandler_NotifyTitle, &metArgs);
}
else {
if (delegate_)
delegate_->OnSetTitle(title);
}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 10
}
//###_START 10
bool ClientHandler::ExecuteTestMenu(int command_id) {
//###_FIND_NEXT_LANDMARK 10
// Allow default handling to proceed.
//###_FIND_NEXT_LANDMARK 10
return false;
//###_FIND_NEXT_LANDMARK 10
}
//###_APPEND_START 10
//my extension ***


void ClientHandler::MyCefSetManagedCallBack(managed_callback m) {


this->mcallback_ = m;

//add resource mx handler 
//
//
//
INIT_MY_MET_ARGS(metArgs, 1)
MyCefSetVoidPtr2(&vargs[1], resource_manager_);
m(CEF_MSG_ClientHandler_SetResourceManager, &metArgs);

//1. add url filter
//2. add resource provider
client::test_runner::SetupResourceManager2(resource_manager_, m);
}

void ClientHandler::MyCefEnableKeyIntercept(int enable) {
this->enableKeyIntercept = enable;
}
//###_APPEND_STOP
